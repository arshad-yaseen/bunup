// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`bunup basic build should build with multiple formats simultaneously: 
          "// tests/.project/index.ts
          var result = "Hello, world!";
          export {
            result
          };
          "
         1`] = `
"// tests/.project/index.ts
var result = "Hello, world!";
export {
  result
};
"
`;

exports[`bunup basic build should build with multiple formats simultaneously: 
          "var __defProp = Object.defineProperty;
          var __getOwnPropNames = Object.getOwnPropertyNames;
          var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
          var __hasOwnProp = Object.prototype.hasOwnProperty;
          var __moduleCache = /* @__PURE__ */ new WeakMap;
          var __toCommonJS = (from) => {
            var entry = __moduleCache.get(from), desc;
            if (entry)
              return entry;
            entry = __defProp({}, "__esModule", { value: true });
            if (from && typeof from === "object" || typeof from === "function")
              __getOwnPropNames(from).map((key) => !__hasOwnProp.call(entry, key) && __defProp(entry, key, {
                get: () => from[key],
                enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
              }));
            __moduleCache.set(from, entry);
            return entry;
          };
          var __export = (target, all) => {
            for (var name in all)
              __defProp(target, name, {
                get: all[name],
                enumerable: true,
                configurable: true,
                set: (newValue) => all[name] = () => newValue
              });
          };

          // tests/.project/index.ts
          var exports__ = {};
          __export(exports__, {
            result: () => result
          });
          module.exports = __toCommonJS(exports__);
          var result = "Hello, world!";
          "
         1`] = `
"var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __moduleCache = /* @__PURE__ */ new WeakMap;
var __toCommonJS = (from) => {
  var entry = __moduleCache.get(from), desc;
  if (entry)
    return entry;
  entry = __defProp({}, "__esModule", { value: true });
  if (from && typeof from === "object" || typeof from === "function")
    __getOwnPropNames(from).map((key) => !__hasOwnProp.call(entry, key) && __defProp(entry, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    }));
  __moduleCache.set(from, entry);
  return entry;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};

// tests/.project/index.ts
var exports__ = {};
__export(exports__, {
  result: () => result
});
module.exports = __toCommonJS(exports__);
var result = "Hello, world!";
"
`;

exports[`bunup basic build should build with multiple formats simultaneously: 
          "(() => {
            var __defProp = Object.defineProperty;
            var __getOwnPropNames = Object.getOwnPropertyNames;
            var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
            var __hasOwnProp = Object.prototype.hasOwnProperty;
            var __moduleCache = /* @__PURE__ */ new WeakMap;
            var __toCommonJS = (from) => {
              var entry = __moduleCache.get(from), desc;
              if (entry)
                return entry;
              entry = __defProp({}, "__esModule", { value: true });
              if (from && typeof from === "object" || typeof from === "function")
                __getOwnPropNames(from).map((key) => !__hasOwnProp.call(entry, key) && __defProp(entry, key, {
                  get: () => from[key],
                  enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
                }));
              __moduleCache.set(from, entry);
              return entry;
            };
            var __export = (target, all) => {
              for (var name in all)
                __defProp(target, name, {
                  get: all[name],
                  enumerable: true,
                  configurable: true,
                  set: (newValue) => all[name] = () => newValue
                });
            };

            // tests/.project/index.ts
            var exports__ = {};
            __export(exports__, {
              result: () => result
            });
            var result = "Hello, world!";
          })();
          "
         1`] = `
"(() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __moduleCache = /* @__PURE__ */ new WeakMap;
  var __toCommonJS = (from) => {
    var entry = __moduleCache.get(from), desc;
    if (entry)
      return entry;
    entry = __defProp({}, "__esModule", { value: true });
    if (from && typeof from === "object" || typeof from === "function")
      __getOwnPropNames(from).map((key) => !__hasOwnProp.call(entry, key) && __defProp(entry, key, {
        get: () => from[key],
        enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
      }));
    __moduleCache.set(from, entry);
    return entry;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, {
        get: all[name],
        enumerable: true,
        configurable: true,
        set: (newValue) => all[name] = () => newValue
      });
  };

  // tests/.project/index.ts
  var exports__ = {};
  __export(exports__, {
    result: () => result
  });
  var result = "Hello, world!";
})();
"
`;

exports[`bunup basic build should build with multiple formats simultaneously 1`] = `
"// tests/.project/index.ts
var result = "Hello, world!";
export {
  result
};
"
`;

exports[`bunup basic build should build with multiple formats simultaneously 2`] = `
"var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __moduleCache = /* @__PURE__ */ new WeakMap;
var __toCommonJS = (from) => {
  var entry = __moduleCache.get(from), desc;
  if (entry)
    return entry;
  entry = __defProp({}, "__esModule", { value: true });
  if (from && typeof from === "object" || typeof from === "function")
    __getOwnPropNames(from).map((key) => !__hasOwnProp.call(entry, key) && __defProp(entry, key, {
      get: () => from[key],
      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
    }));
  __moduleCache.set(from, entry);
  return entry;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};

// tests/.project/index.ts
var exports__ = {};
__export(exports__, {
  result: () => result
});
module.exports = __toCommonJS(exports__);
var result = "Hello, world!";
"
`;

exports[`bunup basic build should build with multiple formats simultaneously 3`] = `
"(() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __moduleCache = /* @__PURE__ */ new WeakMap;
  var __toCommonJS = (from) => {
    var entry = __moduleCache.get(from), desc;
    if (entry)
      return entry;
    entry = __defProp({}, "__esModule", { value: true });
    if (from && typeof from === "object" || typeof from === "function")
      __getOwnPropNames(from).map((key) => !__hasOwnProp.call(entry, key) && __defProp(entry, key, {
        get: () => from[key],
        enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
      }));
    __moduleCache.set(from, entry);
    return entry;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, {
        get: all[name],
        enumerable: true,
        configurable: true,
        set: (newValue) => all[name] = () => newValue
      });
  };

  // tests/.project/index.ts
  var exports__ = {};
  __export(exports__, {
    result: () => result
  });
  var result = "Hello, world!";
})();
"
`;
